"//\n"
"//   Copyright 2013 Pixar\n"
"//\n"
"//   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n"
"//   with the following modification; you may not use this file except in\n"
"//   compliance with the Apache License and the following modification to it:\n"
"//   Section 6. Trademarks. is deleted and replaced with:\n"
"//\n"
"//   6. Trademarks. This License does not grant permission to use the trade\n"
"//      names, trademarks, service marks, or product names of the Licensor\n"
"//      and its affiliates, except as required to comply with Section 4(c) of\n"
"//      the License and to reproduce the content of the NOTICE file.\n"
"//\n"
"//   You may obtain a copy of the Apache License at\n"
"//\n"
"//       http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"//   Unless required by applicable law or agreed to in writing, software\n"
"//   distributed under the Apache License with the above modification is\n"
"//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"
"//   KIND, either express or implied. See the Apache License for the specific\n"
"//   language governing permissions and limitations under the Apache License.\n"
"//\n"
"\n"
"#if defined(OSD_TRANSITION_PATTERN00) || defined(OSD_TRANSITION_PATTERN01) || defined(OSD_TRANSITION_PATTERN02) || defined(OSD_TRANSITION_PATTERN10) || defined(OSD_TRANSITION_PATTERN11) || defined(OSD_TRANSITION_PATTERN12) || defined(OSD_TRANSITION_PATTERN13) || defined(OSD_TRANSITION_PATTERN21) || defined(OSD_TRANSITION_PATTERN22) || defined(OSD_TRANSITION_PATTERN23)\n"
"\n"
"    #define OSD_TRANSITION_TRIANGLE_SUBPATCH\n"
"\n"
"#else\n"
"\n"
"    #undef OSD_TRANSITION_TRIANGLE_SUBPATCH\n"
"\n"
"#endif\n"
"\n"
"//----------------------------------------------------------\n"
"// Patches.TessControlTransition\n"
"//----------------------------------------------------------\n"
"#ifdef OSD_PATCH_TESS_CONTROL_BSPLINE_SHADER\n"
"\n"
"void\n"
"SetTransitionTessLevels(vec3 cp[OSD_PATCH_INPUT_SIZE], int patchLevel)\n"
"{\n"
"#ifdef OSD_ENABLE_SCREENSPACE_TESSELLATION\n"
"    // These tables map the 9, 12, or 16 input control points onto the\n"
"    // canonical 16 control points for a regular patch.\n"
"#if defined OSD_PATCH_BOUNDARY\n"
"    const int p[16] = int[]( 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 );\n"
"#elif defined OSD_PATCH_CORNER\n"
"    const int p[16] = int[]( 0, 1, 2, 2, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8 );\n"
"#else\n"
"    const int p[16] = int[]( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 );\n"
"#endif\n"
"\n"
"#if OSD_TRANSITION_ROTATE == 0\n"
"    const int r[16] = int[]( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 );\n"
"#elif OSD_TRANSITION_ROTATE == 1\n"
"    const int r[16] = int[]( 12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3 );\n"
"#elif OSD_TRANSITION_ROTATE == 2\n"
"    const int r[16] = int[]( 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 );\n"
"#elif OSD_TRANSITION_ROTATE == 3\n"
"    const int r[16] = int[]( 3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12 );\n"
"#endif\n"
"\n"
"    // Expand and rotate control points using remapping tables above\n"
"    vec3 pv0 = cp[p[r[0]]];\n"
"    vec3 pv1 = cp[p[r[1]]];\n"
"    vec3 pv2 = cp[p[r[2]]];\n"
"    vec3 pv3 = cp[p[r[3]]];\n"
"\n"
"    vec3 pv4 = cp[p[r[4]]];\n"
"    vec3 pv5 = cp[p[r[5]]];\n"
"    vec3 pv6 = cp[p[r[6]]];\n"
"    vec3 pv7 = cp[p[r[7]]];\n"
"\n"
"    vec3 pv8 = cp[p[r[8]]];\n"
"    vec3 pv9 = cp[p[r[9]]];\n"
"    vec3 pv10 = cp[p[r[10]]];\n"
"    vec3 pv11 = cp[p[r[11]]];\n"
"\n"
"    vec3 pv12 = cp[p[r[12]]];\n"
"    vec3 pv13 = cp[p[r[13]]];\n"
"    vec3 pv14 = cp[p[r[14]]];\n"
"    vec3 pv15 = cp[p[r[15]]];\n"
"\n"
"    // Each edge of a transition patch is adjacent to one or two \n"
"    // patches at the next refined level of subdivision.\n"
"    // Compute the corresponding vertex-vertex and edge-vertex refined\n"
"    // points along the edges of the patch using Catmull-Clark subdivision\n"
"    // stencil weights.\n"
"    // For simplicity, we let the optimizer discard unused computation.\n"
"    vec3 vv0 = (pv0 + pv2 + pv8 + pv10) * 0.015625 +\n"
"                 (pv1 + pv4 + pv6 + pv9) * 0.09375 + pv5 * 0.5625;\n"
"    vec3 ev01 = (pv1 + pv2 + pv9 + pv10) * 0.0625 + (pv5 + pv6) * 0.375;\n"
"\n"
"    vec3 vv1 = (pv1 + pv3 + pv9 + pv11) * 0.015625 +\n"
"                 (pv2 + pv5 + pv7 + pv10) * 0.09375 + pv6 * 0.5625;\n"
"    vec3 ev12 = (pv5 + pv7 + pv9 + pv11) * 0.0625 + (pv6 + pv10) * 0.375;\n"
"\n"
"    vec3 vv2 = (pv5 + pv7 + pv13 + pv15) * 0.015625 +\n"
"                 (pv6 + pv9 + pv11 + pv14) * 0.09375 + pv10 * 0.5625;\n"
"    vec3 ev23 = (pv5 + pv6 + pv13 + pv14) * 0.0625 + (pv9 + pv10) * 0.375;\n"
"\n"
"    vec3 vv3 = (pv4 + pv6 + pv12 + pv14) * 0.015625 +\n"
"                 (pv5 + pv8 + pv10 + pv13) * 0.09375 + pv9 * 0.5625;\n"
"    vec3 ev30 = (pv4 + pv6 + pv8 + pv10) * 0.0625 + (pv5 + pv9) * 0.375;\n"
"\n"
"    // The vertices along boundaries and at corners are refined specially.\n"
"#if defined OSD_PATCH_BOUNDARY\n"
"#if OSD_TRANSITION_ROTATE == 0\n"
"    vv0 = (pv4 + pv6) * 0.125 + pv5 * 0.75;\n"
"    vv1 = (pv5 + pv7) * 0.125 + pv6 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 1\n"
"    vv1 = (pv2 + pv10) * 0.125 + pv6 * 0.75;\n"
"    vv2 = (pv6 + pv14) * 0.125 + pv10 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 2\n"
"    vv2 = (pv9 + pv11) * 0.125 + pv10 * 0.75;\n"
"    vv3 = (pv8 + pv10) * 0.125 + pv9 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 3\n"
"    vv3 = (pv5 + pv13) * 0.125 + pv9 * 0.75;\n"
"    vv0 = (pv1 + pv9) * 0.125 + pv5 * 0.75;\n"
"#endif\n"
"#elif defined OSD_PATCH_CORNER\n"
"#if OSD_TRANSITION_ROTATE == 0\n"
"    vv0 = (pv4 + pv6) * 0.125 + pv5 * 0.75;\n"
"    vv1 = pv6;\n"
"    vv2 = (pv6 + pv14) * 0.125 + pv10 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 1\n"
"    vv1 = (pv5 + pv7) * 0.125 + pv6 * 0.75;\n"
"    vv2 = pv10;\n"
"    vv3 = (pv8 + pv10) * 0.125 + pv9 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 2\n"
"    vv2 = (pv6 + pv14) * 0.125 + pv10 * 0.75;\n"
"    vv3 = pv9;\n"
"    vv0 = (pv4 + pv6) * 0.125 + pv5 * 0.75;\n"
"#elif OSD_TRANSITION_ROTATE == 3\n"
"    vv3 = (pv8 + pv10) * 0.125 + pv9 * 0.75;\n"
"    vv0 = pv5;\n"
"    vv1 = (pv5 + pv7) * 0.125 + pv6 * 0.75;\n"
"#endif\n"
"#endif\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN00\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, pv9) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, pv10) * 0.5;\n"
"    gl_TessLevelOuter[2] = TessAdaptive(pv9, pv10);\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.5;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN01\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, vv1);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(pv6, pv10);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev01, pv10) * 0.5;\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.25;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN02\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, vv0);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, pv9) * 0.5;\n"
"    gl_TessLevelOuter[2] = TessAdaptive(pv5, pv9);\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.25;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN10 \n"
"    gl_TessLevelOuter[0] = TessAdaptive(pv6, pv10);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, pv10);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev01, vv1);\n"
"\n"
"    gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1]) * 0.25;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN11\n"
"    gl_TessLevelOuter[0] = TessAdaptive(pv9, pv10);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev30, vv3);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev30, pv10);\n"
"\n"
"    gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[2]) * 0.25;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN12\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev30, vv0);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, vv0);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev01, ev30);\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.25;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN13\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, pv10);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev30, pv10);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev01, ev30);\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.25;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN20\n"
"    gl_TessLevelOuter[0] = TessAdaptive(pv5, pv6);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev12, vv1);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev12, ev30);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev30, vv0);\n"
"\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN21\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev23, ev30) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev23, vv3);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev30, vv3);\n"
"\n"
"    gl_TessLevelInner[0] = (gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.5;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN22\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev12, vv2);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev23, vv2);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev12, ev23) * 0.5;\n"
"\n"
"    gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1]) * 0.5;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN23\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev12, ev30);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev12, ev23) * 0.5;\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev23, ev30) * 0.5;\n"
"\n"
"    gl_TessLevelInner[0] =\n"
"        (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.5;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN30\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev30, ev12) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev30, vv0);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev01, vv0);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev01, ev23) * 0.5;\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN31\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, ev23) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev23, vv3);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev30, vv3);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev30, ev12) * 0.5;\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN32\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev23, ev01) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, vv1);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev12, vv1);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev12, ev30) * 0.5;\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN33\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev12, ev30) * 0.5;\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev12, vv2);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev23, vv2);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev01, ev23) * 0.5;\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN40\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, vv0);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(ev01, ev23);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev23, vv3);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(pv5, pv9);\n"
"\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN41\n"
"    gl_TessLevelOuter[0] = TessAdaptive(ev01, vv1);\n"
"    gl_TessLevelOuter[1] = TessAdaptive(pv6, pv10);\n"
"    gl_TessLevelOuter[2] = TessAdaptive(ev23, vv2);\n"
"    gl_TessLevelOuter[3] = TessAdaptive(ev01, ev23);\n"
"\n"
"    gl_TessLevelInner[0] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);\n"
"    gl_TessLevelInner[1] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);\n"
"#endif\n"
"\n"
"#else // OSD_ENABLE_SCREENSPACE_TESSELLATION\n"
"\n"
"    float TessAmount = GetTessLevel(patchLevel);\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN00\n"
"    float side = sqrt(1.25)*TessAmount;\n"
"    gl_TessLevelOuter[0] = side;\n"
"    gl_TessLevelOuter[1] = side;\n"
"    gl_TessLevelOuter[2] = TessAmount;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN01\n"
"    float side =  sqrt(1.25)*TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = TessAmount;\n"
"    gl_TessLevelOuter[2] = side;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN02\n"
"    float side =  sqrt(1.25)*TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = side;\n"
"    gl_TessLevelOuter[2] = TessAmount;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN10 \n"
"    float side = sqrt(1.25) * TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount;\n"
"    gl_TessLevelOuter[1] = side;\n"
"    gl_TessLevelOuter[2] = TessAmount/2.0;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN11\n"
"    float side = sqrt(1.25) * TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount;\n"
"    gl_TessLevelOuter[1] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[2] = side;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN12\n"
"    float side = sqrt(0.125) * TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[2] = side;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN13\n"
"    float side1 = sqrt(1.25) * TessAmount;\n"
"    float side2 = sqrt(0.125) * TessAmount;\n"
"    gl_TessLevelOuter[0] = side1;\n"
"    gl_TessLevelOuter[1] = side1;\n"
"    gl_TessLevelOuter[2] = side2;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0*1.414;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN20\n"
"    gl_TessLevelOuter[0] = TessAmount;\n"
"    gl_TessLevelOuter[1] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[2] = TessAmount;\n"
"    gl_TessLevelOuter[3] = TessAmount/2.0;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"    gl_TessLevelInner[1] = TessAmount;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN21\n"
"    float side = sqrt(0.125) * TessAmount;\n"
"    gl_TessLevelOuter[0] = side;\n"
"    gl_TessLevelOuter[1] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[2] = TessAmount/2.0;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN22\n"
"    float side = sqrt(0.125) * TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[2] = side;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN23\n"
"    float side = sqrt(0.125) * TessAmount;\n"
"    gl_TessLevelOuter[0] = TessAmount;\n"
"    gl_TessLevelOuter[1] = side;\n"
"    gl_TessLevelOuter[2] = side;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount/2.0;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN30\n"
"    gl_TessLevelOuter[0] = gl_TessLevelOuter[1] =\n"
"    gl_TessLevelOuter[2] = gl_TessLevelOuter[3] = TessAmount/2.0;\n"
"    gl_TessLevelInner[0] = gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN31\n"
"    gl_TessLevelOuter[0] = gl_TessLevelOuter[1] =\n"
"    gl_TessLevelOuter[2] = gl_TessLevelOuter[3] = TessAmount/2.0;\n"
"    gl_TessLevelInner[0] = gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN32\n"
"    gl_TessLevelOuter[0] = gl_TessLevelOuter[1] =\n"
"    gl_TessLevelOuter[2] = gl_TessLevelOuter[3] = TessAmount/2.0;\n"
"    gl_TessLevelInner[0] = gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN33\n"
"    gl_TessLevelOuter[0] = gl_TessLevelOuter[1] =\n"
"    gl_TessLevelOuter[2] = gl_TessLevelOuter[3] = TessAmount/2.0;\n"
"    gl_TessLevelInner[0] = gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN40\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = TessAmount;\n"
"    gl_TessLevelOuter[2] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[3] = TessAmount;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount;\n"
"    gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN41\n"
"    gl_TessLevelOuter[0] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[1] = TessAmount;\n"
"    gl_TessLevelOuter[2] = TessAmount/2.0;\n"
"    gl_TessLevelOuter[3] = TessAmount;\n"
"\n"
"    gl_TessLevelInner[0] = TessAmount;\n"
"    gl_TessLevelInner[1] = TessAmount/2.0;\n"
"#endif\n"
"\n"
"#endif // OSD_ENABLE_SCREENSPACE_TESSELLATION\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//----------------------------------------------------------\n"
"// Patches.TessEvalTransition\n"
"//----------------------------------------------------------\n"
"#ifdef OSD_PATCH_TESS_EVAL_BSPLINE_SHADER\n"
"\n"
"vec2\n"
"GetTransitionSubpatchUV()\n"
"{\n"
"#ifdef OSD_TRANSITION_TRIANGLE_SUBPATCH\n"
"    vec3 uvw = gl_TessCoord.xyz;\n"
"#else\n"
"    vec2 uv = gl_TessCoord.xy;\n"
"#endif\n"
"    vec2 UV = vec2(0, 0);\n"
"\n"
"//  OSD_TRANSITION_PATTERN0*\n"
"//  +-------------+\n"
"//  |     /\\     |\n"
"//  | 1  /  \\  2 |\n"
"//  |   /    \\   |\n"
"//  |  /      \\  |\n"
"//  | /    0   \\ |\n"
"//  |/          \\|\n"
"//  +-------------+\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN00\n"
"    UV.x = 1.0-uvw.y-uvw.z/2;\n"
"    UV.y = 1.0-uvw.z;\n"
"#endif    \n"
"#ifdef OSD_TRANSITION_PATTERN01\n"
"    UV.x = 1.0-uvw.y/2;\n"
"    UV.y = uvw.x;\n"
"#endif    \n"
"#ifdef OSD_TRANSITION_PATTERN02\n"
"    UV.x = uvw.z/2;\n"
"    UV.y = uvw.x;\n"
"#endif\n"
"\n"
"// OSD_TRANSITION_PATTERN1*\n"
"//  +-------------+\n"
"//  | 0   /\\   2 |\n"
"//  |    /   \\   |\n"
"//  |   /  3   \\ |\n"
"//  |  /       /  |\n"
"//  | /    /    1 |\n"
"//  |/ /          |\n"
"//  +-------------+\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN10\n"
"    UV.x = 1.0-uvw.x/2.0;\n"
"    UV.y = uvw.z;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN11\n"
"    UV.x = uvw.y;\n"
"    UV.y = 1.0-uvw.x/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN12\n"
"    UV.x = uvw.x/2.0;\n"
"    UV.y = uvw.y/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN13\n"
"    UV.x = 1.0-uvw.x-uvw.y/2.0;\n"
"    UV.y = 1.0-uvw.y-uvw.x/2.0;\n"
"#endif\n"
"\n"
"//  OSD_TRANSITION_PATTERN2*\n"
"//  +-------------+\n"
"//  |             |\n"
"//  |      0      |\n"
"//  |             |\n"
"//  |-------------|\n"
"//  |\\    3    / |\n"
"//  |  \\     /   |\n"
"//  | 1  \\ /   2 |\n"
"//  +-------------+\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN20\n"
"    UV.x = 1.0-uv.y;\n"
"    UV.y = uv.x/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN21\n"
"    UV.x = uvw.z/2.0;\n"
"    UV.y = 1.0-uvw.y/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN22\n"
"    UV.x = 1.0-uvw.x/2.0;\n"
"    UV.y = 1.0-uvw.y/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN23\n"
"    UV.x = 1.0-uvw.y-uvw.x/2;\n"
"    UV.y = 0.5+uvw.x/2.0;\n"
"#endif\n"
"\n"
"//  OSD_TRANSITION_PATTERN3*\n"
"//  +-------------+\n"
"//  |      |      |\n"
"//  |  1   |  0   |\n"
"//  |      |      |\n"
"//  |------|------|\n"
"//  |      |      |\n"
"//  |  3   |  2   |\n"
"//  |      |      |\n"
"//  +-------------+\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN30\n"
"    UV.x = uv.y/2.0;\n"
"    UV.y = 0.5 - uv.x/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN31\n"
"    UV.x = 0.5 - uv.x/2.0;\n"
"    UV.y = 1.0 - uv.y/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN32\n"
"    UV.x = 0.5 + uv.x/2.0;\n"
"    UV.y = uv.y/2.0;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN33\n"
"    UV.x = 1.0 - uv.y/2.0;\n"
"    UV.y = 0.5 + uv.x/2.0;\n"
"#endif\n"
"\n"
"//  OSD_TRANSITION_PATTERN4*\n"
"//  +-------------+\n"
"//  |      |      |\n"
"//  |      |      |\n"
"//  |      |      |\n"
"//  |  1   |   0  |\n"
"//  |      |      |\n"
"//  |      |      |\n"
"//  |      |      |\n"
"//  +-------------+\n"
"\n"
"#ifdef OSD_TRANSITION_PATTERN40\n"
"    UV.x = 0.5 - uv.y/2.0;\n"
"    UV.y = uv.x;\n"
"#endif\n"
"#ifdef OSD_TRANSITION_PATTERN41\n"
"    UV.x = 1.0 - uv.y/2.0;\n"
"    UV.y = uv.x;\n"
"#endif\n"
"\n"
"    return UV;\n"
"}\n"
"\n"
"#endif\n"
"\n"
